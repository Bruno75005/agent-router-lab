### R√©sum√© des fichiers trouv√©s dans D:\agent-router-lab ###

===== D:\agent-router-lab\next-env.d.ts =====

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


================================================================================

===== D:\agent-router-lab\package.json =====

{
  "name": "agent-router-lab",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "autoprefixer": "^10.4.0",
    "chart.js": "^4.4.8",
    "lucide-react": "^0.487.0",
    "next": "^14.2.28",
    "postcss": "^8.4.0",
    "react": "18.2.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "18.2.0",
    "sqlite": "^5.1.1",
    "sqlite3": "^5.1.7",
    "tailwindcss": "^3.3.0"
  },
  "devDependencies": {
    "@types/node": "22.14.0",
    "@types/react": "19.1.0",
    "typescript": "^5.3.0"
  }
}


================================================================================

===== D:\agent-router-lab\postcss.config.js =====

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================================================

===== D:\agent-router-lab\README.md =====

# Agent Router Lab

Simulateur visuel d'aiguillage d'agents IA.
feedbackBot ‚Üí relation client / analyse de texte.

devHelper ‚Üí d√©veloppement / code / debug.

dataScout ‚Üí analyse de donn√©es / CSV / requ√™tes SQL.
Agent ID Nom affich√© R√¥le / Mission principale Mots-cl√©s d√©tecteurs
graphMaster üßÆ GraphMaster G√©n√®re des graphes visuels (matplotlib, chartjs, etc.) graph, courbe, visualisation
docReader üìö Doc Reader R√©sume et extrait l'info depuis des PDF / .docx r√©sum√©, document, pdf
sqlSensei üßæ SQL Sensei R√©dige, corrige et optimise des requ√™tes SQL SQL, SELECT, requ√™te, base
trendWatch üìà Trend Watcher Analyse les tendances ou signaux faibles dans les donn√©es tendance, analyse, pattern
explainBot üß† ExplainBot Fournit des explications p√©dagogiques sur des concepts pourquoi, comment, d√©finition
imageAnalyst üñºÔ∏è Image Analyst Analyse images ou diagrammes (via vision LLM si dispo) image, screenshot, diagramme
ideaBooster üí° Idea Booster G√©n√®re des id√©es cr√©atives : noms, slogans, scripts id√©e, nom, slogan, pitch
legalAdvisor ‚öñÔ∏è Legal Advisor Aide juridique basique sur des contrats, CGU, RGPD RGPD, loi, contrat, CGU
emailAssistant üì¨ Email Assistant G√©n√®re ou reformule des e-mails pro ou support client email, r√©ponse, relance
codeReviewer üßê Code Reviewer Analyse, corrige, commente du code en profondeur review, lint, am√©liore, code qualit√©
schedulerBot üìÖ Scheduler Bot G√®re des dates, planifie, g√©n√®re des agendas, reminders, cronjobs date, √©ch√©ance, planning, cron, calendrier
notionHelper üóÇÔ∏è Notion Helper Organise les id√©es sous forme de plan, tableau, document structur√© plan, table, notion, roadmap
commandGenie üíª Command Genie G√©n√®re des commandes CLI, Docker, bash, git commande, shell, terminal, docker, bash
bugHunter üêû Bug Hunter D√©tecte et corrige des bugs dans le code fourni bug, erreur, crash, exception, stack trace
markdownMaster ‚úçÔ∏è Markdown Master G√©n√®re ou convertit en Markdown (docs techniques, README...) markdown, README, doc
translationBot üåç Translation Bot Traduit automatiquement du contenu multilingue traduit, anglais, espagnol, traduction


================================================================================

===== D:\agent-router-lab\tailwind.config.js =====

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


================================================================================

===== D:\agent-router-lab\tsconfig.json =====

{
  "compilerOptions": {
    "target": "ESNext",
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ],

    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "esModuleInterop": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}


================================================================================

===== D:\agent-router-lab\app\layout.tsx =====

import "../styles/globals.css"

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="fr">
      <body className="bg-gray-100 text-zinc-900">{children}</body>
    </html>
  )
}


================================================================================

===== D:\agent-router-lab\app\page.tsx =====

'use client'
import type { JSX } from 'react'

import { useState, useEffect } from 'react'
import { 
  Send, 
  History, 
  Sparkles, 
  BarChart3,
  MessageSquare, 
  Code, 
  Database, 
  LineChart, 
  ClipboardList,
  FileText, 
  Database as SqlIcon, 
  TrendingUp, 
  HelpCircle, 
  Image, 
  Lightbulb, 
  Scale, 
  Mail, 
  CheckSquare, 
  Calendar, 
  Trello, 
  Terminal, 
  Bug, 
  FileDown, 
  Globe 
} from 'lucide-react'
import Link from 'next/link'

const getDisplayName = (agentId: string): string => {
  const map: Record<string, string> = {
    feedbackBot: "Feedback Bot", devHelper: "Dev Helper", dataScout: "Data Scout",
    graphMaster: "GraphMaster", docReader: "Doc Reader", sqlSensei: "SQL Sensei",
    trendWatch: "Trend Watcher", explainBot: "ExplainBot", imageAnalyst: "Image Analyst",
    ideaBooster: "Idea Booster", legalAdvisor: "Legal Advisor", emailAssistant: "Email Assistant",
    codeReviewer: "Code Reviewer", schedulerBot: "Scheduler Bot", notionHelper: "Notion Helper",
    commandGenie: "Command Genie", bugHunter: "Bug Hunter", markdownMaster: "Markdown Master",
    translationBot: "Translation Bot"
  }
  return map[agentId] || agentId
}

const agentDescriptions: Record<string, string> = {
  feedbackBot: "Analyse les retours utilisateurs et feedbacks.",
  devHelper: "Aide au d√©veloppement (code, debug, dev web).",
  dataScout: "Explore les donn√©es structur√©es comme les CSV.",
  graphMaster: "Cr√©e des visualisations graphiques (charts, courbes).",
  docReader: "Lit et r√©sume les documents (PDF, Word).",
  sqlSensei: "R√©dige et optimise des requ√™tes SQL.",
  trendWatch: "Analyse les tendances et signaux faibles.",
  explainBot: "Explique les concepts complexes.",
  imageAnalyst: "Analyse des images, captures, diagrammes.",
  ideaBooster: "G√©n√®re des id√©es cr√©atives, noms, slogans.",
  legalAdvisor: "Donne des conseils juridiques de base.",
  emailAssistant: "R√©dige ou reformule des e-mails.",
  codeReviewer: "Am√©liore ou relit du code.",
  schedulerBot: "Aide √† la planification et organisation.",
  notionHelper: "G√®re des contenus de type Notion ou tables.",
  commandGenie: "R√©dige des commandes shell/CLI/Docker.",
  bugHunter: "Traque les bugs et erreurs techniques.",
  markdownMaster: "G√©n√®re ou am√©liore du Markdown / Readme.",
  translationBot: "Traduit des textes en plusieurs langues."
}

type HistoryEntry = {
  question: string
  agent: string
  method: 'mots-cl√©s' | 'LLM' | 'correction'
  date: string
}

export default function HomePage() {
  const [input, setInput] = useState("")
  const [result, setResult] = useState<HistoryEntry | null>(null)
  const [history, setHistory] = useState<HistoryEntry[]>([])
  const [correctedAgent, setCorrectedAgent] = useState<string | null>(null)
  const [pendingCorrection, setPendingCorrection] = useState<string | null>(null)

  useEffect(() => {
    const stored = localStorage.getItem("agent_history")
    if (stored) setHistory(JSON.parse(stored))
  }, [])

  const handleTest = async () => {
    if (!input.trim()) return

    const correctionRes = await fetch("/api/corrections", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question: input })
    })
    const correction = await correctionRes.json()

    if (correction.agent) {
      const entry: HistoryEntry = {
        question: input,
        agent: correction.agent,
        method: "correction",
        date: new Date().toISOString(),
      }
      const newHistory: HistoryEntry[] = [entry, ...history]
      setResult(entry)
      setHistory(newHistory)
      localStorage.setItem("agent_history", JSON.stringify(newHistory))
      setInput("")
      return
    }

    const res = await fetch("/api/route-agent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question: input }),
    })
    const data = await res.json()
    const entry: HistoryEntry = {
      question: input,
      agent: data.agent || "‚ùå Aucun agent d√©tect√©",
      method: data.source || "LLM",
      date: new Date().toISOString(),
    }
    const newHistory: HistoryEntry[] = [entry, ...history]
    setResult(entry)
    setHistory(newHistory)
    localStorage.setItem("agent_history", JSON.stringify(newHistory))
    setCorrectedAgent(null)
    setPendingCorrection(null)
    setInput("")
  }

  const validateCorrection = async () => {
    if (!pendingCorrection || !result) return

    await fetch("/api/corrections", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question: result.question, agent: pendingCorrection })
    })

    const updatedHistory: HistoryEntry[] = history.map((entry) =>
      entry === result ? { ...entry, agent: pendingCorrection, method: "correction" } : entry
    )
    setHistory(updatedHistory)
    localStorage.setItem("agent_history", JSON.stringify(updatedHistory))
    setCorrectedAgent(pendingCorrection)
    setPendingCorrection(null)
  }

  const handleCorrectionChange = (value: string) => {
    if (!result) return
    if (value !== result.agent) {
      setPendingCorrection(value)
    } else {
      setPendingCorrection(null)
    }
  }

  const agentOptions = Object.keys(agentDescriptions).map((id) => (
    <option key={id} value={id} title={agentDescriptions[id]}>
      {getDisplayName(id)}
    </option>
  ))

  const getAgentIcon = (agentId: string) => {
    const size = 16
    const icons: Record<string, JSX.Element> = {
      feedbackBot: <MessageSquare size={size} />, devHelper: <Code size={size} />,
      dataScout: <Database size={size} />, graphMaster: <LineChart size={size} />,
      docReader: <FileText size={size} />, sqlSensei: <SqlIcon size={size} />,
      trendWatch: <TrendingUp size={size} />, explainBot: <HelpCircle size={size} />, 
      imageAnalyst: <Image size={size} />, ideaBooster: <Lightbulb size={size} />, 
      legalAdvisor: <Scale size={size} />, emailAssistant: <Mail size={size} />,
      codeReviewer: <CheckSquare size={size} />, schedulerBot: <Calendar size={size} />, 
      notionHelper: <Trello size={size} />, commandGenie: <Terminal size={size} />, 
      bugHunter: <Bug size={size} />, markdownMaster: <FileDown size={size} />, 
      translationBot: <Globe size={size} />
    }
    return icons[agentId] || <HelpCircle size={size} />
  }

  const agentColor = (agent: string) => {
    const map: Record<string, string> = {
      feedbackBot: "text-pink-600", devHelper: "text-green-600", dataScout: "text-indigo-600",
      graphMaster: "text-purple-600", docReader: "text-amber-700", sqlSensei: "text-blue-800",
      trendWatch: "text-green-700", explainBot: "text-cyan-700", imageAnalyst: "text-rose-600",
      ideaBooster: "text-yellow-600", legalAdvisor: "text-slate-700", emailAssistant: "text-blue-600",
      codeReviewer: "text-emerald-700", schedulerBot: "text-orange-600", notionHelper: "text-zinc-700",
      commandGenie: "text-fuchsia-600", bugHunter: "text-red-600", markdownMaster: "text-teal-700",
      translationBot: "text-sky-600"
    }
    return map[agent] || "text-gray-800"
  }

  const methodBadge = (method: string) =>
    method === "LLM"
      ? <span className="bg-blue-100 text-blue-700 px-2 py-0.5 rounded-full text-xs font-semibold">LLM</span>
      : method === "correction"
      ? <span className="bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full text-xs font-semibold">Correction</span>
      : <span className="bg-emerald-100 text-emerald-700 px-2 py-0.5 rounded-full text-xs font-semibold">Mots-cl√©s</span>

  return (
    <>
      <header className="sticky top-0 bg-white z-10 border-b border-zinc-200 shadow-sm px-6 py-4 flex justify-between items-center">
        <h1 className="text-xl font-bold flex items-center gap-2 text-blue-700">
          <Sparkles size={22} /> Simulateur d'aiguillage D'AGENTS IA
        </h1>
        <div className="flex gap-2">
          <Link
            href="/dashboard"
            className="inline-flex items-center gap-2 text-sm text-blue-600 border border-blue-600 px-3 py-1.5 rounded hover:bg-blue-600 hover:text-white transition"
          >
            <BarChart3 size={16} /> Tableau de bord
          </Link>
          <Link
            href="/corrections"
            className="inline-flex items-center gap-2 text-sm text-blue-600 border border-blue-600 px-3 py-1.5 rounded hover:bg-blue-600 hover:text-white transition"
          >
            <ClipboardList size={16} /> Voir les corrections
          </Link>
        </div>
      </header>

      <main className="p-6 max-w-4xl mx-auto space-y-8">
        <div className="flex items-center gap-2">
          <input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Pose une question √† router..."
            className="flex-1 border border-zinc-300 px-4 py-3 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          />
          <button
            onClick={handleTest}
            className="bg-blue-600 hover:bg-blue-700 text-white px-5 py-3 rounded-lg flex items-center gap-2 shadow transition"
          >
            <Send size={18} /> Tester
          </button>
        </div>

        {result && (
          <div className="bg-zinc-50 border border-zinc-200 rounded-lg p-5 shadow-sm space-y-3">
            <p className="text-sm text-zinc-500">üîç D√©cision prise</p>
            <div className="text-lg flex items-center gap-2">
              <span className={`font-bold flex items-center gap-1.5 ${agentColor(correctedAgent || result.agent)}`}>
                {getAgentIcon(correctedAgent || result.agent)} {getDisplayName(correctedAgent || result.agent)}
              </span> via {methodBadge(result.method)}
            </div>
            <div className="text-sm text-zinc-600">Corriger manuellement si besoin :</div>
            <div className="flex items-center gap-2">
              <select
                value={pendingCorrection || correctedAgent || result.agent}
                onChange={(e) => handleCorrectionChange(e.target.value)}
                className="border border-zinc-300 px-3 py-2 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500"
              >
                {agentOptions}
              </select>
              {pendingCorrection && pendingCorrection !== result.agent && (
                <button
                  onClick={validateCorrection}
                  className="px-3 py-2 text-sm bg-emerald-600 text-white rounded hover:bg-emerald-700 transition"
                >
                  ‚úÖ Valider la correction
                </button>
              )}
            </div>
          </div>
        )}

        {history.length > 0 && (
          <div className="space-y-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <History size={20} /> Historique des aiguillages
            </h2>
            <div className="overflow-x-auto rounded-lg border border-zinc-200 shadow-sm">
              <table className="w-full text-sm bg-white">
                <thead className="bg-zinc-100 text-zinc-600 text-left">
                  <tr>
                    <th className="px-4 py-3 border-b">Requ√™te</th>
                    <th className="px-4 py-3 border-b">Agent</th>
                    <th className="px-4 py-3 border-b">M√©thode</th>
                    <th className="px-4 py-3 border-b">Date</th>
                  </tr>
                </thead>
                <tbody>
                  {history.map((entry, idx) => (
                    <tr key={idx} className="hover:bg-zinc-50 transition">
                      <td className="px-4 py-2 border-b">{entry.question}</td>
                      <td className={`px-4 py-2 border-b font-semibold ${agentColor(entry.agent)}`}>
                        <div className="flex items-center gap-1.5">
                          {getAgentIcon(entry.agent)} {getDisplayName(entry.agent)}
                        </div>
                      </td>
                      <td className="px-4 py-2 border-b">{methodBadge(entry.method)}</td>
                      <td className="px-4 py-2 border-b text-xs text-zinc-500">
                        {new Date(entry.date).toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </main>
    </>
  )
}

================================================================================

===== D:\agent-router-lab\app\api\corrections\route.ts =====

import { NextRequest, NextResponse } from 'next/server'
import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import path from 'path'

let db: any = null

async function getDb() {
  if (db) return db
  db = await open({
    filename: path.join(process.cwd(), 'corrections.db'),
    driver: sqlite3.Database
  })
  await db.exec(`CREATE TABLE IF NOT EXISTS corrections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question TEXT UNIQUE,
    agent TEXT,
    date TEXT
  )`)
  return db
}

export async function POST(req: NextRequest) {
  const body = await req.json()
  const db = await getDb()

  if (body.question && body.agent) {
    // Enregistrer une correction
    await db.run(
      `INSERT OR REPLACE INTO corrections (question, agent, date)
       VALUES (?, ?, ?)`,
      body.question,
      body.agent,
      new Date().toISOString()
    )
    return NextResponse.json({ status: 'ok' })
  }

  if (body.question) {
    // Chercher une correction existante
    const existing = await db.get(`SELECT agent FROM corrections WHERE question = ?`, body.question)
    if (existing) {
      return NextResponse.json({ agent: existing.agent })
    }
  }

  return NextResponse.json({})
}


================================================================================

===== D:\agent-router-lab\app\api\corrections\update\route.ts =====

import { NextRequest, NextResponse } from 'next/server'
import sqlite3 from 'sqlite3'
import { open } from 'sqlite'

// PATCH/POST /api/corrections/update
export async function POST(req: NextRequest) {
  const { id, agent } = await req.json()

  if (!id || !agent) {
    return NextResponse.json({ error: "Missing id or agent" }, { status: 400 })
  }

  const db = await open({
    filename: './corrections.db',
    driver: sqlite3.Database
  })

  await db.run('UPDATE corrections SET agent = ? WHERE id = ?', agent, id)

  return NextResponse.json({ success: true })
}


================================================================================

===== D:\agent-router-lab\app\api\export\corrections\route.ts =====

import { NextResponse } from 'next/server'
import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import path from 'path'

const dbPath = path.join(process.cwd(), 'corrections.db')

export async function GET() {
  try {
    const db = await open({ filename: dbPath, driver: sqlite3.Database })
    await db.exec(`CREATE TABLE IF NOT EXISTS corrections (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      question TEXT,
      before_agent TEXT,
      after_agent TEXT,
      date TEXT
    )`)

    const rows = await db.all(`SELECT * FROM corrections ORDER BY date DESC`)
    return NextResponse.json(rows)
  } catch (err: any) {
    return NextResponse.json({ error: err.message }, { status: 500 })
  }
}


================================================================================

===== D:\agent-router-lab\app\api\route-agent\route.ts =====


import { NextResponse } from "next/server"

const keywordMap = {
  // feedbackBot
  feedback: "feedbackBot",
  client: "feedbackBot",
  
  // devHelper
  dev: "devHelper",
  code: "devHelper",
  
  // dataScout
  csv: "dataScout",
  donn√©es: "dataScout",
  
  // graphMaster
  graph: "graphMaster",
  courbe: "graphMaster",
  visualisation: "graphMaster",
  
  // docReader
  r√©sum√©: "docReader",
  document: "docReader",
  pdf: "docReader",
  
  // sqlSensei
  sql: "sqlSensei",
  select: "sqlSensei",
  requ√™te: "sqlSensei",
  base: "sqlSensei",
  
  // trendWatch
  tendance: "trendWatch",
  analyse: "trendWatch",
  pattern: "trendWatch",
  
  // explainBot
  pourquoi: "explainBot",
  comment: "explainBot",
  d√©finition: "explainBot",
  
  // imageAnalyst
  image: "imageAnalyst",
  screenshot: "imageAnalyst",
  diagramme: "imageAnalyst",
  
  // ideaBooster
  id√©e: "ideaBooster",
  nom: "ideaBooster",
  slogan: "ideaBooster",
  pitch: "ideaBooster",
  
  // legalAdvisor
  rgpd: "legalAdvisor",
  loi: "legalAdvisor",
  contrat: "legalAdvisor",
  cgu: "legalAdvisor",
  
  // emailAssistant
  email: "emailAssistant",
  r√©ponse: "emailAssistant",
  relance: "emailAssistant",
  
  // codeReviewer
  review: "codeReviewer",
  lint: "codeReviewer",
  am√©liore: "codeReviewer",
  "code qualit√©": "codeReviewer",
  
  // schedulerBot
  date: "schedulerBot",
  √©ch√©ance: "schedulerBot",
  planning: "schedulerBot",
  cron: "schedulerBot",
  calendrier: "schedulerBot",
  
  // notionHelper
  plan: "notionHelper",
  table: "notionHelper",
  notion: "notionHelper",
  roadmap: "notionHelper",
  
  // commandGenie
  commande: "commandGenie",
  shell: "commandGenie",
  terminal: "commandGenie",
  docker: "commandGenie",
  bash: "commandGenie",
  
  // bugHunter
  bug: "bugHunter",
  erreur: "bugHunter",
  crash: "bugHunter",
  exception: "bugHunter",
  "stack trace": "bugHunter",
  
  // markdownMaster
  markdown: "markdownMaster",
  readme: "markdownMaster",
  doc: "markdownMaster",
  
  // translationBot
  traduit: "translationBot",
  anglais: "translationBot",
  espagnol: "translationBot",
  traduction: "translationBot"
}

export async function POST(req: Request) {
  const { question } = await req.json()

  const lower = question.toLowerCase()

  // üéØ D√©tection par mots-cl√©s
  for (const [keyword, agent] of Object.entries(keywordMap)) {
    if (lower.includes(keyword)) {
      return NextResponse.json({
        agent,
        source: "mots-cl√©s"
      })
    }
  }

  // ü§ñ Fallback : classification via un petit LLM local (Ollama)
  const res = await fetch("http://localhost:11434/api/generate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model: "phi4:latest", // ou un autre mod√®le install√© chez toi
      prompt: `Classifie cette requ√™te parmi les agents suivants : feedbackBot, devHelper, dataScout, graphMaster, docReader, sqlSensei, trendWatch, explainBot, imageAnalyst, ideaBooster, legalAdvisor, emailAssistant, codeReviewer, schedulerBot, notionHelper, commandGenie, bugHunter, markdownMaster, translationBot. Requ√™te : "${question}". R√©pond uniquement par le nom de l'agent.`,
      stream: false
    }),
  })

  const json = await res.json()

  return NextResponse.json({
    agent: json.response.trim(),
    source: "LLM"
  })
}

================================================================================

===== D:\agent-router-lab\app\corrections\page.tsx =====

'use client'
import type { JSX } from 'react'
import { useEffect, useState } from 'react'
import {
  Sparkles, MessageSquare, Code, Database, LineChart, FileText,
  Database as SqlIcon, TrendingUp, HelpCircle, Image, Lightbulb,
  Scale, Mail, CheckSquare, Calendar, Trello, Terminal, Bug,
  FileDown, Globe, Download, Pencil, Check
} from 'lucide-react'
import Link from 'next/link'

interface CorrectionEntry {
  id: number
  question: string
  agent: string
  date: string
}

const agentIcons: Record<string, JSX.Element> = {
  feedbackBot: <MessageSquare size={16} />, devHelper: <Code size={16} />, dataScout: <Database size={16} />,
  graphMaster: <LineChart size={16} />, docReader: <FileText size={16} />, sqlSensei: <SqlIcon size={16} />,
  trendWatch: <TrendingUp size={16} />, explainBot: <HelpCircle size={16} />, imageAnalyst: <Image size={16} />,
  ideaBooster: <Lightbulb size={16} />, legalAdvisor: <Scale size={16} />, emailAssistant: <Mail size={16} />,
  codeReviewer: <CheckSquare size={16} />, schedulerBot: <Calendar size={16} />, notionHelper: <Trello size={16} />,
  commandGenie: <Terminal size={16} />, bugHunter: <Bug size={16} />, markdownMaster: <FileDown size={16} />,
  translationBot: <Globe size={16} />
}

export default function CorrectionsPage() {
  const [corrections, setCorrections] = useState<CorrectionEntry[]>([])
  const [search, setSearch] = useState("")
  const [sortBy, setSortBy] = useState<"date" | "agent">("date")
  const [editId, setEditId] = useState<number | null>(null)
  const [editAgent, setEditAgent] = useState<string>("")

  useEffect(() => {
    fetch("/api/export/corrections")
      .then((res) => res.json())
      .then((data) => setCorrections(data))
  }, [])

  const filtered = corrections.filter((c) =>
    c.question.toLowerCase().includes(search.toLowerCase())
  )

  const sorted = [...filtered].sort((a, b) => {
    if (sortBy === "date") {
      return new Date(b.date).getTime() - new Date(a.date).getTime()
    }
    return a.agent.localeCompare(b.agent)
  })

  const handleEdit = (id: number, agent: string) => {
    setEditId(id)
    setEditAgent(agent)
  }

  const handleSave = async (id: number) => {
    await fetch("/api/corrections/update", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id, agent: editAgent })
    })
    const updated = corrections.map(c => c.id === id ? { ...c, agent: editAgent } : c)
    setCorrections(updated)
    setEditId(null)
    setEditAgent("")
  }

  const exportCSV = () => {
    const csv = ["id,question,agent,date"].concat(
      corrections.map(c => `${c.id},"${c.question}",${c.agent},${c.date}`)
    ).join("\n")
    const blob = new Blob([csv], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'corrections.csv'
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-blue-700 flex items-center gap-2">
          <Sparkles size={22} /> Corrections enregistr√©es
        </h1>
        <div className="flex gap-2">
          <button
            onClick={exportCSV}
            className="text-sm border border-green-600 text-green-600 px-4 py-2 rounded hover:bg-green-600 hover:text-white flex items-center gap-1"
          >
            <Download size={16} /> Export CSV
          </button>
          <Link
            href="/"
            className="text-sm border border-blue-600 text-blue-600 px-4 py-2 rounded hover:bg-blue-600 hover:text-white"
          >
            Retour
          </Link>
        </div>
      </header>

      <div className="flex flex-col md:flex-row gap-4 md:items-center justify-between">
        <input
          type="text"
          placeholder="Recherche dans les questions..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="border border-zinc-300 px-4 py-2 rounded-md shadow-sm w-full md:w-1/2"
        />
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value as any)}
          className="border border-zinc-300 px-3 py-2 rounded-md shadow-sm"
        >
          <option value="date">Trier par date</option>
          <option value="agent">Trier par agent</option>
        </select>
      </div>

      <table className="w-full text-sm bg-white border border-zinc-200 rounded-md overflow-hidden">
        <thead className="bg-zinc-100">
          <tr>
            <th className="text-left px-4 py-2 border-b">Question</th>
            <th className="text-left px-4 py-2 border-b">Agent</th>
            <th className="text-left px-4 py-2 border-b">Date</th>
            <th className="text-left px-4 py-2 border-b"></th>
          </tr>
        </thead>
        <tbody>
          {sorted.map((entry) => (
            <tr key={entry.id} className="hover:bg-zinc-50">
              <td className="px-4 py-2 border-b">{entry.question}</td>
              <td className="px-4 py-2 border-b text-blue-700 font-medium flex items-center gap-1.5">
                {agentIcons[entry.agent] || <HelpCircle size={16} />}
                {editId === entry.id ? (
                  <select
                    value={editAgent}
                    onChange={(e) => setEditAgent(e.target.value)}
                    className="ml-2 px-1 py-0.5 border border-zinc-300 rounded"
                  >
                    {Object.keys(agentIcons).map((key) => (
                      <option key={key} value={key}>{key}</option>
                    ))}
                  </select>
                ) : (
                  <span>{entry.agent}</span>
                )}
              </td>
              <td className="px-4 py-2 border-b text-xs text-zinc-500">
                {new Date(entry.date).toLocaleString()}
              </td>
              <td className="px-4 py-2 border-b">
                {editId === entry.id ? (
                  <button
                    onClick={() => handleSave(entry.id)}
                    className="text-green-600 text-sm hover:underline flex items-center gap-1"
                  >
                    <Check size={14} /> Valider
                  </button>
                ) : (
                  <button
                    onClick={() => handleEdit(entry.id, entry.agent)}
                    className="text-blue-600 text-sm hover:underline flex items-center gap-1"
                  >
                    <Pencil size={14} /> Modifier
                  </button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

================================================================================

===== D:\agent-router-lab\app\dashboard\page.tsx =====

import Dashboard from "../../components/Dashboard"


export default function DashboardPage() {
  return <Dashboard />
}


================================================================================

===== D:\agent-router-lab\components\Dashboard.tsx =====

'use client'

import { useEffect, useState } from "react"
import { Bar, Line } from "react-chartjs-2"
import Link from "next/link"
import {
  Chart as ChartJS,
  BarElement,
  LineElement,
  PointElement,
  CategoryScale,
  LinearScale,
  Tooltip,
  Legend,
} from "chart.js"
import { 
  ArrowLeft, 
  BarChart3,
  MessageSquare,
  Code,
  Database,
  LineChart,
  FileText,
  HelpCircle,
  Image,
  Lightbulb,
  Scale,
  Mail,
  CheckSquare,
  Calendar,
  Trello,
  Terminal,
  Bug,
  FileDown,
  Globe,
  TrendingUp
} from 'lucide-react'

ChartJS.register(BarElement, LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend)

interface Entry {
  question: string
  agent: string
  method: "mots-cl√©s" | "LLM"
  date: string
  topic?: string
}

export default function Dashboard() {
  const [entries, setEntries] = useState<Entry[]>([])

  useEffect(() => {
    const stored = localStorage.getItem("agent_history")
    if (stored) {
      setEntries(JSON.parse(stored))
    }
  }, [])

  const getAgentIcon = (agentId: string) => {
    const size = 16
    
    switch(agentId) {
      case "feedbackBot": return <MessageSquare size={size} />;
      case "devHelper": return <Code size={size} />;
      case "dataScout": return <Database size={size} />;
      case "graphMaster": return <LineChart size={size} />;
      case "docReader": return <FileText size={size} />;
      case "sqlSensei": return <Database size={size} />; // R√©utilisation de Database pour SQL
      case "trendWatch": return <TrendingUp size={size} />;
      case "explainBot": return <HelpCircle size={size} />;
      case "imageAnalyst": return <Image size={size} />;
      case "ideaBooster": return <Lightbulb size={size} />;
      case "legalAdvisor": return <Scale size={size} />;
      case "emailAssistant": return <Mail size={size} />;
      case "codeReviewer": return <CheckSquare size={size} />;
      case "schedulerBot": return <Calendar size={size} />;
      case "notionHelper": return <Trello size={size} />;
      case "commandGenie": return <Terminal size={size} />;
      case "bugHunter": return <Bug size={size} />;
      case "markdownMaster": return <FileDown size={size} />;
      case "translationBot": return <Globe size={size} />;
      default: return <HelpCircle size={size} />;
    }
  }

  const getDisplayName = (agentId: string): string => {
    const agentMap: Record<string, string> = {
      "feedbackBot": "Feedback Bot",
      "devHelper": "Dev Helper",
      "dataScout": "Data Scout",
      "graphMaster": "GraphMaster",
      "docReader": "Doc Reader",
      "sqlSensei": "SQL Sensei",
      "trendWatch": "Trend Watcher",
      "explainBot": "ExplainBot",
      "imageAnalyst": "Image Analyst",
      "ideaBooster": "Idea Booster",
      "legalAdvisor": "Legal Advisor",
      "emailAssistant": "Email Assistant",
      "codeReviewer": "Code Reviewer",
      "schedulerBot": "Scheduler Bot",
      "notionHelper": "Notion Helper",
      "commandGenie": "Command Genie",
      "bugHunter": "Bug Hunter",
      "markdownMaster": "Markdown Master",
      "translationBot": "Translation Bot"
    }

    return agentMap[agentId] || agentId
  }

  const detectTopic = (text: string): string => {
    const lower = text.toLowerCase()
    if (lower.includes("graph") || lower.includes("chart") || lower.includes("visualisation")) return "Visualisation"
    if (lower.includes("document") || lower.includes("pdf") || lower.includes("r√©sum√©")) return "Documents"
    if (lower.includes("sql") || lower.includes("requ√™te") || lower.includes("base")) return "Base de donn√©es"
    if (lower.includes("tendance") || lower.includes("analyse") || lower.includes("pattern")) return "Analyse de tendances"
    if (lower.includes("pourquoi") || lower.includes("comment") || lower.includes("d√©finition")) return "Explications"
    if (lower.includes("image") || lower.includes("screenshot") || lower.includes("diagramme")) return "Images"
    if (lower.includes("id√©e") || lower.includes("slogan") || lower.includes("pitch")) return "Id√©es cr√©atives"
    if (lower.includes("rgpd") || lower.includes("loi") || lower.includes("contrat") || lower.includes("cgu")) return "Juridique"
    if (lower.includes("email") || lower.includes("r√©ponse") || lower.includes("relance")) return "Emails"
    if (lower.includes("review") || lower.includes("lint") || lower.includes("am√©liore") || lower.includes("code qualit√©")) return "Code review"
    if (lower.includes("date") || lower.includes("√©ch√©ance") || lower.includes("planning")) return "Planification"
    if (lower.includes("plan") || lower.includes("table") || lower.includes("notion") || lower.includes("roadmap")) return "Organisation"
    if (lower.includes("commande") || lower.includes("shell") || lower.includes("terminal") || lower.includes("docker")) return "Commandes"
    if (lower.includes("bug") || lower.includes("erreur") || lower.includes("crash")) return "Bugs"
    if (lower.includes("markdown") || lower.includes("readme") || lower.includes("doc")) return "Documentation"
    if (lower.includes("traduit") || lower.includes("anglais") || lower.includes("traduction")) return "Traduction"
    if (lower.includes("react") || lower.includes("dev") || lower.includes("code")) return "D√©veloppement"
    if (lower.includes("csv") || lower.includes("donn√©es") || lower.includes("tableau")) return "Donn√©es"
    if (lower.includes("client") || lower.includes("feedback") || lower.includes("exp√©rience")) return "Relation client"
    return "Autre"
  }

  // Obtenez des noms d'agent format√©s pour l'affichage dans les graphiques
  const formattedAgentNames = entries.map(e => e.agent).filter((agent, index, self) => 
    self.indexOf(agent) === index
  ).map(getDisplayName);

  const agents = Array.from(new Set(entries.map((e) => e.agent)))
  const methodCountByAgent = {
    motsCles: agents.map((agent) => entries.filter((e) => e.agent === agent && e.method === "mots-cl√©s").length),
    llm: agents.map((agent) => entries.filter((e) => e.agent === agent && e.method === "LLM").length),
  }

  const topicCount: Record<string, number> = {}
  entries.forEach((e) => {
    const topic = detectTopic(e.question)
    topicCount[topic] = (topicCount[topic] || 0) + 1
  })

  const recentEntries = [...entries]
    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    .slice(0, 10)

  return (
    <div className="p-6 space-y-8 max-w-6xl mx-auto">
      {/* Navbar */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-blue-700 flex items-center gap-2">
          <BarChart3 size={24} /> Tableau de bord des aiguillages
        </h1>
        <Link
          href="/"
          className="text-blue-600 text-sm border border-blue-600 px-4 py-2 rounded hover:bg-blue-600 hover:text-white transition flex items-center gap-1.5"
        >
          <ArrowLeft size={16} /> Retour au simulateur
        </Link>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white p-4 rounded shadow">
          <h2 className="text-lg font-semibold mb-2">Nombre d'aiguillages par agent</h2>
          <Bar
            data={{
              labels: agents.map(getDisplayName),
              datasets: [
                {
                  label: "Par mots-cl√©s",
                  data: methodCountByAgent.motsCles,
                  backgroundColor: "#34d399",
                },
                {
                  label: "Par LLM",
                  data: methodCountByAgent.llm,
                  backgroundColor: "#60a5fa",
                },
              ],
            }}
            options={{
              responsive: true,
              plugins: { legend: { position: "bottom" } },
              scales: {
                x: {
                  ticks: {
                    autoSkip: false,
                    maxRotation: 45,
                    minRotation: 45
                  }
                }
              }
            }}
          />
        </div>

        <div className="bg-white p-4 rounded shadow">
          <h2 className="text-lg font-semibold mb-2">R√©partition par sujet</h2>
          <Bar
            data={{
              labels: Object.keys(topicCount),
              datasets: [
                {
                  label: "Requ√™tes",
                  data: Object.values(topicCount),
                  backgroundColor: "#f59e0b",
                },
              ],
            }}
            options={{
              responsive: true,
              plugins: { legend: { display: false } },
              scales: {
                x: {
                  ticks: {
                    autoSkip: false,
                    maxRotation: 45,
                    minRotation: 45
                  }
                }
              }
            }}
          />
        </div>

        <div className="bg-white p-4 rounded shadow md:col-span-2">
          <h2 className="text-lg font-semibold mb-2">Chronologie des 10 derni√®res requ√™tes</h2>
          <Line
            data={{
              labels: recentEntries.map((e) => new Date(e.date).toLocaleTimeString()),
              datasets: [
                {
                  label: "Aiguillages",
                  data: recentEntries.map((_, i) => i + 1),
                  borderColor: "#a78bfa",
                  backgroundColor: "#ddd6fe",
                  tension: 0.4,
                },
              ],
            }}
            options={{
              responsive: true,
              plugins: { 
                legend: { position: "bottom" },
                tooltip: {
                  callbacks: {
                    title: function(context) {
                      const index = context[0].dataIndex;
                      return `Requ√™te: ${recentEntries[index].question}`;
                    },
                    label: function(context) {
                      const index = context.dataIndex;
                      return `Agent: ${getDisplayName(recentEntries[index].agent)}`;
                    },
                    afterLabel: function(context) {
                      const index = context.dataIndex;
                      return `M√©thode: ${recentEntries[index].method}`;
                    }
                  }
                }
              }
            }}
          />
        </div>
      </div>
    </div>
  )
}

================================================================================

===== D:\agent-router-lab\scripts\export-corrections.ts =====

import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import { join } from 'path'
import fs from 'fs'

async function exportCorrections() {
  const db = await open({
    filename: join(__dirname, '../data/corrections.db'),
    driver: sqlite3.Database
  })

  const rows = await db.all(`SELECT * FROM corrections ORDER BY created_at DESC`)
  const json = JSON.stringify(rows, null, 2)

  const outputPath = join(__dirname, '../export/corrections.json')
  fs.mkdirSync(join(__dirname, '../export'), { recursive: true })
  fs.writeFileSync(outputPath, json)

  console.log(`‚úÖ Corrections export√©es dans : ${outputPath}`)
}

exportCorrections()


================================================================================

===== D:\agent-router-lab\scripts\init-db.ts =====

import sqlite3 from 'sqlite3'
import { open } from 'sqlite'
import { join } from 'path'
import fs from 'fs'

async function setup() {
  const dbPath = join(__dirname, '../data/corrections.db')

  // üîí Cr√©e le dossier data/ si absent
  const dataDir = join(__dirname, '../data')
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true })
  }

  const db = await open({
    filename: dbPath,
    driver: sqlite3.Database
  })

  await db.exec(`
    CREATE TABLE IF NOT EXISTS corrections (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      question TEXT NOT NULL,
      agent TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `)

  console.log("‚úÖ Base corrections.db initialis√©e √† :", dbPath)
}

setup()


================================================================================


### 17 fichiers enregistr√©s avec succ√®s. ###
